{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/bfhl-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  var _response$numbers, _response$alphabets, _response$highest_alp;\n  const [inputJson, setInputJson] = useState('');\n  const [error, setError] = useState('');\n  const [response, setResponse] = useState(null);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n\n  // Set document title to roll number\n  useEffect(() => {\n    if (response !== null && response !== void 0 && response.roll_number) {\n      document.title = response.roll_number;\n    }\n  }, [response]);\n  const validateJSON = jsonString => {\n    try {\n      const parsed = JSON.parse(jsonString);\n      return parsed.data && Array.isArray(parsed.data);\n    } catch {\n      return false;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateJSON(inputJson)) {\n      setError('Invalid JSON format - must contain \"data\" array');\n      setResponse(null);\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:8080/bfhl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: inputJson\n      });\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n      const data = await res.json();\n      setResponse(data);\n      setError('');\n    } catch (err) {\n      setError('Failed to connect to backend: ' + err.message);\n      setResponse(null);\n    }\n  };\n  const handleOptionToggle = option => {\n    setSelectedOptions(prev => prev.includes(option) ? prev.filter(item => item !== option) : [...prev, option]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputJson,\n        onChange: e => setInputJson(e.target.value),\n        placeholder: 'Example: {\"data\": [\"M\", \"1\", \"334\", \"4\", \"B\"]}'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Process Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"response-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-panel\",\n        children: ['numbers', 'alphabets', 'highest'].map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"option-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedOptions.includes(option),\n            onChange: () => handleOptionToggle(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), option.charAt(0).toUpperCase() + option.slice(1)]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [selectedOptions.includes('numbers') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: ((_response$numbers = response.numbers) === null || _response$numbers === void 0 ? void 0 : _response$numbers.join(', ')) || 'None found'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), selectedOptions.includes('alphabets') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Alphabets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: ((_response$alphabets = response.alphabets) === null || _response$alphabets === void 0 ? void 0 : _response$alphabets.join(', ')) || 'None found'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), selectedOptions.includes('highest') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Highest Alphabet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: ((_response$highest_alp = response.highest_alphabet) === null || _response$highest_alp === void 0 ? void 0 : _response$highest_alp.join(', ')) || 'None found'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vD5YubbbSv4ZxJ5FdHy6eShWLbU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","_response$numbers","_response$alphabets","_response$highest_alp","inputJson","setInputJson","error","setError","response","setResponse","selectedOptions","setSelectedOptions","roll_number","document","title","validateJSON","jsonString","parsed","JSON","parse","data","Array","isArray","handleSubmit","e","preventDefault","res","fetch","method","headers","body","ok","Error","status","json","err","message","handleOptionToggle","option","prev","includes","filter","item","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","type","map","checked","charAt","toUpperCase","slice","numbers","join","alphabets","highest_alphabet","_c","$RefreshReg$"],"sources":["/home/anubhav/bfhl-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.css';\n\nexport default function App() {\n  const [inputJson, setInputJson] = useState('');\n  const [error, setError] = useState('');\n  const [response, setResponse] = useState(null);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n\n  // Set document title to roll number\n  useEffect(() => {\n    if (response?.roll_number) {\n      document.title = response.roll_number;\n    }\n  }, [response]);\n\n  const validateJSON = (jsonString) => {\n    try {\n      const parsed = JSON.parse(jsonString);\n      return parsed.data && Array.isArray(parsed.data);\n    } catch {\n      return false;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateJSON(inputJson)) {\n      setError('Invalid JSON format - must contain \"data\" array');\n      setResponse(null);\n      return;\n    }\n\n    try {\n      const res = await fetch('http://localhost:8080/bfhl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: inputJson,\n      });\n\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n\n      const data = await res.json();\n      setResponse(data);\n      setError('');\n    } catch (err) {\n      setError('Failed to connect to backend: ' + err.message);\n      setResponse(null);\n    }\n  };\n\n  const handleOptionToggle = (option) => {\n    setSelectedOptions(prev => \n      prev.includes(option) \n        ? prev.filter(item => item !== option) \n        : [...prev, option]\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Data Processor</h1>\n      \n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={inputJson}\n          onChange={(e) => setInputJson(e.target.value)}\n          placeholder={'Example: {\"data\": [\"M\", \"1\", \"334\", \"4\", \"B\"]}'}\n        />\n        <button type=\"submit\">Process Data</button>\n      </form>\n\n      {error && <div className=\"error\">{error}</div>}\n\n      {response && (\n        <div className=\"response-container\">\n          <div className=\"options-panel\">\n            {['numbers', 'alphabets', 'highest'].map((option) => (\n              <label key={option} className=\"option-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedOptions.includes(option)}\n                  onChange={() => handleOptionToggle(option)}\n                />\n                {option.charAt(0).toUpperCase() + option.slice(1)}\n              </label>\n            ))}\n          </div>\n\n          <div className=\"results\">\n            {selectedOptions.includes('numbers') && (\n              <div className=\"result-box\">\n                <h3>Numbers</h3>\n                <p>{response.numbers?.join(', ') || 'None found'}</p>\n              </div>\n            )}\n\n            {selectedOptions.includes('alphabets') && (\n              <div className=\"result-box\">\n                <h3>Alphabets</h3>\n                <p>{response.alphabets?.join(', ') || 'None found'}</p>\n              </div>\n            )}\n\n            {selectedOptions.includes('highest') && (\n              <div className=\"result-box\">\n                <h3>Highest Alphabet</h3>\n                <p>{response.highest_alphabet?.join(', ') || 'None found'}</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}